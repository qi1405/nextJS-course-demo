{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\dimmy\\\\Desktop\\\\Building a Multi-Page SPA with React Router_practice\\\\src\\\\pages\\\\QuoteDetail.js\",\n    _s = $RefreshSig$();\n\nimport { Fragment, useState, useEffect } from \"react\";\nimport { useParams, Route, Routes, Link, useNavigate } from \"react-router-dom\";\nimport Comments from \"../components/comments/Comments\";\nimport HighlightedQuote from \"../components/quotes/HighlightedQuote\";\nimport LoadingSpinner from \"../components/UI/LoadingSpinner\";\nimport useHttp from \"../hooks/use-http\";\nimport { getSingleQuote } from \"../lib/api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst QuoteDetails = () => {\n  _s();\n\n  const navigate = useNavigate();\n  const params = useParams();\n  const [loadComments, setLoadComments] = useState(\"Load\");\n  const {\n    quoteId\n  } = params;\n  const {\n    sendRequest,\n    status,\n    data: loadedQuote,\n    error\n  } = useHttp(getSingleQuote, true);\n  useEffect(() => {\n    sendRequest(quoteId);\n  }, [sendRequest, quoteId]);\n\n  if (status === 'pending') {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"centered\",\n      children: /*#__PURE__*/_jsxDEV(LoadingSpinner, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 15\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 11\n    }, this);\n  }\n\n  ;\n\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"centered\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 14\n    }, this);\n  }\n\n  if (!loadedQuote) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No quote found!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 12\n    }, this);\n  }\n\n  const changeAddressHandler = () => {\n    if (loadComments === \"Load\") {\n      navigate(`/quotes/${params.quoteId}/comments`);\n      setLoadComments(\"Hide\");\n    } else {\n      navigate(`/quotes/${params.quoteId}`);\n      setLoadComments(\"Load\");\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(HighlightedQuote, {\n      text: quote.text,\n      author: quote.author\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"centered\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn--flat\",\n        onClick: changeAddressHandler,\n        children: [loadComments, \" Comments\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Routes, {\n      children: /*#__PURE__*/_jsxDEV(Route, {\n        path: \"comments\",\n        element: /*#__PURE__*/_jsxDEV(Comments, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 41\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n};\n\n_s(QuoteDetails, \"JR66JtL6HDi9d4h8hezU9uBoNLo=\", false, function () {\n  return [useNavigate, useParams, useHttp];\n});\n\n_c = QuoteDetails;\nexport default QuoteDetails;\n\nvar _c;\n\n$RefreshReg$(_c, \"QuoteDetails\");","map":{"version":3,"sources":["C:/Users/dimmy/Desktop/Building a Multi-Page SPA with React Router_practice/src/pages/QuoteDetail.js"],"names":["Fragment","useState","useEffect","useParams","Route","Routes","Link","useNavigate","Comments","HighlightedQuote","LoadingSpinner","useHttp","getSingleQuote","QuoteDetails","navigate","params","loadComments","setLoadComments","quoteId","sendRequest","status","data","loadedQuote","error","changeAddressHandler","quote","text","author"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,QAAnB,EAA6BC,SAA7B,QAA8C,OAA9C;AACA,SAASC,SAAT,EAAoBC,KAApB,EAA2BC,MAA3B,EAAmCC,IAAnC,EAAyCC,WAAzC,QAA4D,kBAA5D;AACA,OAAOC,QAAP,MAAqB,iCAArB;AACA,OAAOC,gBAAP,MAA6B,uCAA7B;AACA,OAAOC,cAAP,MAA2B,iCAA3B;AACA,OAAOC,OAAP,MAAoB,mBAApB;AACA,SAASC,cAAT,QAA+B,YAA/B;;;AAGA,MAAMC,YAAY,GAAG,MAAM;AAAA;;AACzB,QAAMC,QAAQ,GAAGP,WAAW,EAA5B;AACA,QAAMQ,MAAM,GAAGZ,SAAS,EAAxB;AACA,QAAM,CAACa,YAAD,EAAeC,eAAf,IAAkChB,QAAQ,CAAC,MAAD,CAAhD;AAEA,QAAM;AAAEiB,IAAAA;AAAF,MAAcH,MAApB;AAEA,QAAM;AAACI,IAAAA,WAAD;AAAcC,IAAAA,MAAd;AAAsBC,IAAAA,IAAI,EAAEC,WAA5B;AAAyCC,IAAAA;AAAzC,MAAkDZ,OAAO,CAACC,cAAD,EAAiB,IAAjB,CAA/D;AAEAV,EAAAA,SAAS,CAAC,MAAM;AACZiB,IAAAA,WAAW,CAACD,OAAD,CAAX;AACH,GAFQ,EAEN,CAACC,WAAD,EAAcD,OAAd,CAFM,CAAT;;AAIA,MAAGE,MAAM,KAAK,SAAd,EAAyB;AACrB,wBACI;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA,6BACI,QAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADJ;AAKH;;AAAA;;AAED,MAAIG,KAAJ,EAAW;AACP,wBAAO;AAAG,MAAA,SAAS,EAAC,UAAb;AAAA,gBAAyBA;AAAzB;AAAA;AAAA;AAAA;AAAA,YAAP;AACH;;AAED,MAAI,CAACD,WAAL,EAAkB;AAChB,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;;AAED,QAAME,oBAAoB,GAAG,MAAM;AACjC,QAAIR,YAAY,KAAK,MAArB,EAA6B;AAC3BF,MAAAA,QAAQ,CAAE,WAAUC,MAAM,CAACG,OAAQ,WAA3B,CAAR;AACAD,MAAAA,eAAe,CAAC,MAAD,CAAf;AACD,KAHD,MAGO;AACLH,MAAAA,QAAQ,CAAE,WAAUC,MAAM,CAACG,OAAQ,EAA3B,CAAR;AACAD,MAAAA,eAAe,CAAC,MAAD,CAAf;AACD;AACF,GARD;;AAUA,sBACE,QAAC,QAAD;AAAA,4BACE,QAAC,gBAAD;AAAkB,MAAA,IAAI,EAAEQ,KAAK,CAACC,IAA9B;AAAoC,MAAA,MAAM,EAAED,KAAK,CAACE;AAAlD;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA,6BACE;AAAQ,QAAA,SAAS,EAAC,WAAlB;AAA8B,QAAA,OAAO,EAAEH,oBAAvC;AAAA,mBACGR,YADH;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAFF,eAOE,QAAC,MAAD;AAAA,6BACE,QAAC,KAAD;AAAO,QAAA,IAAI,EAAC,UAAZ;AAAuB,QAAA,OAAO,eAAE,QAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAhC;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAPF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAaD,CApDD;;GAAMH,Y;UACaN,W,EACFJ,S,EAKyCQ,O;;;KAPpDE,Y;AAsDN,eAAeA,YAAf","sourcesContent":["import { Fragment, useState, useEffect } from \"react\";\r\nimport { useParams, Route, Routes, Link, useNavigate } from \"react-router-dom\";\r\nimport Comments from \"../components/comments/Comments\";\r\nimport HighlightedQuote from \"../components/quotes/HighlightedQuote\";\r\nimport LoadingSpinner from \"../components/UI/LoadingSpinner\";\r\nimport useHttp from \"../hooks/use-http\";\r\nimport { getSingleQuote } from \"../lib/api\";\r\n\r\n\r\nconst QuoteDetails = () => {\r\n  const navigate = useNavigate();\r\n  const params = useParams();\r\n  const [loadComments, setLoadComments] = useState(\"Load\");\r\n\r\n  const { quoteId } = params;\r\n\r\n  const {sendRequest, status, data: loadedQuote, error} = useHttp(getSingleQuote, true);\r\n\r\n  useEffect(() => {\r\n      sendRequest(quoteId)\r\n  }, [sendRequest, quoteId]);\r\n\r\n  if(status === 'pending') {\r\n      return (\r\n          <div className=\"centered\">\r\n              <LoadingSpinner />\r\n          </div>\r\n      )\r\n  };\r\n\r\n  if (error) {\r\n      return <p className=\"centered\">{error}</p>\r\n  }\r\n\r\n  if (!loadedQuote) {\r\n    return <p>No quote found!</p>;\r\n  }\r\n\r\n  const changeAddressHandler = () => {\r\n    if (loadComments === \"Load\") {\r\n      navigate(`/quotes/${params.quoteId}/comments`);\r\n      setLoadComments(\"Hide\");\r\n    } else {\r\n      navigate(`/quotes/${params.quoteId}`);\r\n      setLoadComments(\"Load\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <HighlightedQuote text={quote.text} author={quote.author} />\r\n      <div className=\"centered\">\r\n        <button className=\"btn--flat\" onClick={changeAddressHandler}>\r\n          {loadComments} Comments\r\n        </button>\r\n      </div>\r\n      <Routes>\r\n        <Route path=\"comments\" element={<Comments />} />\r\n      </Routes>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default QuoteDetails;\r\n"]},"metadata":{},"sourceType":"module"}