{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\dimmy\\\\Desktop\\\\Building a Multi-Page SPA with React Router_practice\\\\src\\\\components\\\\quotes\\\\QuoteForm.js\",\n    _s2 = $RefreshSig$();\n\nimport { useRef, useState } from \"react\";\nimport { usePrompt } from 'react-router-dom';\nimport Card from \"../UI/Card\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\nimport classes from \"./QuoteForm.module.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst QuoteForm = props => {\n  _s2();\n\n  var _s = $RefreshSig$();\n\n  const authorInputRef = useRef();\n  const textInputRef = useRef();\n\n  function submitFormHandler(event) {\n    event.preventDefault();\n    const enteredAuthor = authorInputRef.current.value;\n    const enteredText = textInputRef.current.value; // optional: Could validate here\n\n    props.onAddQuote({\n      author: enteredAuthor,\n      text: enteredText\n    });\n  }\n\n  const formFocusHandler = () => {\n    setIsFocused(true);\n  };\n\n  function BlockingForm() {\n    _s();\n\n    const [isFocused, setIsFocused] = useState(false);\n    usePrompt(\"Are you sure you want to leave, all the entered data will be erased?!\", isFocused);\n  }\n\n  _s(BlockingForm, \"KOFWP6QM0vRR6txm96YbkKBFt94=\", false, function () {\n    return [usePrompt];\n  });\n\n  return /*#__PURE__*/_jsxDEV(Card, {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onFocus: formFocusHandler,\n      className: classes.form,\n      onSubmit: submitFormHandler,\n      children: [props.isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.loading,\n        children: /*#__PURE__*/_jsxDEV(LoadingSpinner, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.control,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"author\",\n          children: \"Author\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"author\",\n          ref: authorInputRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.control,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"text\",\n          children: \"Text\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          id: \"text\",\n          rows: \"5\",\n          ref: textInputRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.actions,\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn\",\n          children: \"Add Quote\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n};\n\n_s2(QuoteForm, \"q+5GnqPvlPQw7BSDcbMn6zjr2RI=\");\n\n_c = QuoteForm;\nexport default QuoteForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"QuoteForm\");","map":{"version":3,"sources":["C:/Users/dimmy/Desktop/Building a Multi-Page SPA with React Router_practice/src/components/quotes/QuoteForm.js"],"names":["useRef","useState","usePrompt","Card","LoadingSpinner","classes","QuoteForm","props","authorInputRef","textInputRef","submitFormHandler","event","preventDefault","enteredAuthor","current","value","enteredText","onAddQuote","author","text","formFocusHandler","setIsFocused","BlockingForm","isFocused","form","isLoading","loading","control","actions"],"mappings":";;;AAAA,SAASA,MAAT,EAAiBC,QAAjB,QAAiC,OAAjC;AACA,SAASC,SAAT,QAA0B,kBAA1B;AACA,OAAOC,IAAP,MAAiB,YAAjB;AACA,OAAOC,cAAP,MAA2B,sBAA3B;AACA,OAAOC,OAAP,MAAoB,wBAApB;;;AAEA,MAAMC,SAAS,GAAIC,KAAD,IAAW;AAAA;;AAAA;;AAC3B,QAAMC,cAAc,GAAGR,MAAM,EAA7B;AACA,QAAMS,YAAY,GAAGT,MAAM,EAA3B;;AAEA,WAASU,iBAAT,CAA2BC,KAA3B,EAAkC;AAChCA,IAAAA,KAAK,CAACC,cAAN;AAEA,UAAMC,aAAa,GAAGL,cAAc,CAACM,OAAf,CAAuBC,KAA7C;AACA,UAAMC,WAAW,GAAGP,YAAY,CAACK,OAAb,CAAqBC,KAAzC,CAJgC,CAMhC;;AAEAR,IAAAA,KAAK,CAACU,UAAN,CAAiB;AAAEC,MAAAA,MAAM,EAAEL,aAAV;AAAyBM,MAAAA,IAAI,EAAEH;AAA/B,KAAjB;AACD;;AAED,QAAMI,gBAAgB,GAAG,MAAM;AAC7BC,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACD,GAFD;;AAIA,WAASC,YAAT,GAAwB;AAAA;;AACtB,UAAM,CAACC,SAAD,EAAYF,YAAZ,IAA4BpB,QAAQ,CAAE,KAAF,CAA1C;AAEAC,IAAAA,SAAS,CACP,uEADO,EACkEqB,SADlE,CAAT;AAGD;;AAzB0B,KAmBlBD,YAnBkB;AAAA,YAsBzBpB,SAtByB;AAAA;;AA4B3B,sBACE,QAAC,IAAD;AAAA,2BACE;AACE,MAAA,OAAO,EAAEkB,gBADX;AAEE,MAAA,SAAS,EAAEf,OAAO,CAACmB,IAFrB;AAGE,MAAA,QAAQ,EAAEd,iBAHZ;AAAA,iBAKGH,KAAK,CAACkB,SAAN,iBACC;AAAK,QAAA,SAAS,EAAEpB,OAAO,CAACqB,OAAxB;AAAA,+BACE,QAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cANJ,eAWE;AAAK,QAAA,SAAS,EAAErB,OAAO,CAACsB,OAAxB;AAAA,gCACE;AAAO,UAAA,OAAO,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAO,UAAA,IAAI,EAAC,MAAZ;AAAmB,UAAA,EAAE,EAAC,QAAtB;AAA+B,UAAA,GAAG,EAAEnB;AAApC;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cAXF,eAeE;AAAK,QAAA,SAAS,EAAEH,OAAO,CAACsB,OAAxB;AAAA,gCACE;AAAO,UAAA,OAAO,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAU,UAAA,EAAE,EAAC,MAAb;AAAoB,UAAA,IAAI,EAAC,GAAzB;AAA6B,UAAA,GAAG,EAAElB;AAAlC;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cAfF,eAmBE;AAAK,QAAA,SAAS,EAAEJ,OAAO,CAACuB,OAAxB;AAAA,+BACE;AAAQ,UAAA,SAAS,EAAC,KAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cAnBF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AA2BD,CAvDD;;IAAMtB,S;;KAAAA,S;AAyDN,eAAeA,SAAf","sourcesContent":["import { useRef, useState } from \"react\";\nimport { usePrompt } from 'react-router-dom';\nimport Card from \"../UI/Card\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\nimport classes from \"./QuoteForm.module.css\";\n\nconst QuoteForm = (props) => {\n  const authorInputRef = useRef();\n  const textInputRef = useRef();\n\n  function submitFormHandler(event) {\n    event.preventDefault();\n\n    const enteredAuthor = authorInputRef.current.value;\n    const enteredText = textInputRef.current.value;\n\n    // optional: Could validate here\n\n    props.onAddQuote({ author: enteredAuthor, text: enteredText });\n  }\n\n  const formFocusHandler = () => {\n    setIsFocused(true);\n  };\n\n  function BlockingForm() {\n    const [isFocused, setIsFocused] = useState (false);\n\n    usePrompt(\n      \"Are you sure you want to leave, all the entered data will be erased?!\", isFocused\n    );\n  }\n\n\n  return (\n    <Card>\n      <form\n        onFocus={formFocusHandler}\n        className={classes.form}\n        onSubmit={submitFormHandler}\n      >\n        {props.isLoading && (\n          <div className={classes.loading}>\n            <LoadingSpinner />\n          </div>\n        )}\n\n        <div className={classes.control}>\n          <label htmlFor=\"author\">Author</label>\n          <input type=\"text\" id=\"author\" ref={authorInputRef} />\n        </div>\n        <div className={classes.control}>\n          <label htmlFor=\"text\">Text</label>\n          <textarea id=\"text\" rows=\"5\" ref={textInputRef}></textarea>\n        </div>\n        <div className={classes.actions}>\n          <button className=\"btn\">Add Quote</button>\n        </div>\n      </form>\n    </Card>\n  );\n};\n\nexport default QuoteForm;\n"]},"metadata":{},"sourceType":"module"}