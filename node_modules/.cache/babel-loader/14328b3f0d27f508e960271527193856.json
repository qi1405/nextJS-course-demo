{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\dimmy\\\\Desktop\\\\Building a Multi-Page SPA with React Router_practice\\\\src\\\\components\\\\quotes\\\\QuoteForm.js\",\n    _s2 = $RefreshSig$();\n\nimport { useRef, useState } from \"react\";\nimport { usePrompt } from \"react-router-dom\";\nimport Card from \"../UI/Card\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\nimport classes from \"./QuoteForm.module.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction BlockingForm() {\n  _s2();\n\n  var _s = $RefreshSig$();\n\n  const [isBlocking, setIsBlocking] = useState(false);\n\n  const QuoteForm = props => {\n    _s();\n\n    const authorInputRef = useRef();\n    const textInputRef = useRef();\n\n    function submitFormHandler(event) {\n      event.preventDefault();\n      const enteredAuthor = authorInputRef.current.value;\n      const enteredText = textInputRef.current.value; // optional: Could validate here\n\n      props.onAddQuote({\n        author: enteredAuthor,\n        text: enteredText\n      });\n    }\n\n    usePrompt(\"Are you sure you want to leave, all the entered data will be erased?!\", isFocused);\n\n    const formFocusHandler = () => {\n      setIsBlocking(true);\n    };\n\n    return /*#__PURE__*/_jsxDEV(Card, {\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        onFocus: formFocusHandler,\n        className: classes.form,\n        onSubmit: submitFormHandler,\n        children: [props.isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.loading,\n          children: /*#__PURE__*/_jsxDEV(LoadingSpinner, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.control,\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"author\",\n            children: \"Author\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            id: \"author\",\n            ref: authorInputRef\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.control,\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"text\",\n            children: \"Text\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n            id: \"text\",\n            rows: \"5\",\n            ref: textInputRef\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.actions,\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn\",\n            children: \"Add Quote\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this);\n  };\n\n  _s(QuoteForm, \"pEjisS1Ny2qQzEUNgQ4Vc1E9jeM=\", false, function () {\n    return [usePrompt];\n  });\n}\n\n_s2(BlockingForm, \"GDDG5yoJ1VmNcIptChaHB/pF/EQ=\");\n\n_c = BlockingForm;\nexport default QuoteForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"BlockingForm\");","map":{"version":3,"sources":["C:/Users/dimmy/Desktop/Building a Multi-Page SPA with React Router_practice/src/components/quotes/QuoteForm.js"],"names":["useRef","useState","usePrompt","Card","LoadingSpinner","classes","BlockingForm","isBlocking","setIsBlocking","QuoteForm","props","authorInputRef","textInputRef","submitFormHandler","event","preventDefault","enteredAuthor","current","value","enteredText","onAddQuote","author","text","isFocused","formFocusHandler","form","isLoading","loading","control","actions"],"mappings":";;;AAAA,SAASA,MAAT,EAAiBC,QAAjB,QAAiC,OAAjC;AACA,SAASC,SAAT,QAA0B,kBAA1B;AACA,OAAOC,IAAP,MAAiB,YAAjB;AACA,OAAOC,cAAP,MAA2B,sBAA3B;AACA,OAAOC,OAAP,MAAoB,wBAApB;;;AAEA,SAASC,YAAT,GAAwB;AAAA;;AAAA;;AACtB,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BP,QAAQ,CAAC,KAAD,CAA5C;;AACA,QAAMQ,SAAS,GAAIC,KAAD,IAAW;AAAA;;AAC3B,UAAMC,cAAc,GAAGX,MAAM,EAA7B;AACA,UAAMY,YAAY,GAAGZ,MAAM,EAA3B;;AAEA,aAASa,iBAAT,CAA2BC,KAA3B,EAAkC;AAChCA,MAAAA,KAAK,CAACC,cAAN;AAEA,YAAMC,aAAa,GAAGL,cAAc,CAACM,OAAf,CAAuBC,KAA7C;AACA,YAAMC,WAAW,GAAGP,YAAY,CAACK,OAAb,CAAqBC,KAAzC,CAJgC,CAMhC;;AAEAR,MAAAA,KAAK,CAACU,UAAN,CAAiB;AAAEC,QAAAA,MAAM,EAAEL,aAAV;AAAyBM,QAAAA,IAAI,EAAEH;AAA/B,OAAjB;AACD;;AAEDjB,IAAAA,SAAS,CACP,uEADO,EAEPqB,SAFO,CAAT;;AAKA,UAAMC,gBAAgB,GAAG,MAAM;AAC7BhB,MAAAA,aAAa,CAAC,IAAD,CAAb;AACD,KAFD;;AAIA,wBACE,QAAC,IAAD;AAAA,6BACE;AACE,QAAA,OAAO,EAAEgB,gBADX;AAEE,QAAA,SAAS,EAAEnB,OAAO,CAACoB,IAFrB;AAGE,QAAA,QAAQ,EAAEZ,iBAHZ;AAAA,mBAKGH,KAAK,CAACgB,SAAN,iBACC;AAAK,UAAA,SAAS,EAAErB,OAAO,CAACsB,OAAxB;AAAA,iCACE,QAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBANJ,eAWE;AAAK,UAAA,SAAS,EAAEtB,OAAO,CAACuB,OAAxB;AAAA,kCACE;AAAO,YAAA,OAAO,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE;AAAO,YAAA,IAAI,EAAC,MAAZ;AAAmB,YAAA,EAAE,EAAC,QAAtB;AAA+B,YAAA,GAAG,EAAEjB;AAApC;AAAA;AAAA;AAAA;AAAA,kBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,gBAXF,eAeE;AAAK,UAAA,SAAS,EAAEN,OAAO,CAACuB,OAAxB;AAAA,kCACE;AAAO,YAAA,OAAO,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE;AAAU,YAAA,EAAE,EAAC,MAAb;AAAoB,YAAA,IAAI,EAAC,GAAzB;AAA6B,YAAA,GAAG,EAAEhB;AAAlC;AAAA;AAAA;AAAA;AAAA,kBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,gBAfF,eAmBE;AAAK,UAAA,SAAS,EAAEP,OAAO,CAACwB,OAAxB;AAAA,iCACE;AAAQ,YAAA,SAAS,EAAC,KAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBAnBF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF;AA2BD,GAnDD;;AAFsB,KAEhBpB,SAFgB;AAAA,YAiBpBP,SAjBoB;AAAA;AAsDvB;;IAtDQI,Y;;KAAAA,Y;AAwDT,eAAeG,SAAf","sourcesContent":["import { useRef, useState } from \"react\";\nimport { usePrompt } from \"react-router-dom\";\nimport Card from \"../UI/Card\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\nimport classes from \"./QuoteForm.module.css\";\n\nfunction BlockingForm() {\n  const [isBlocking, setIsBlocking] = useState(false);\n  const QuoteForm = (props) => {\n    const authorInputRef = useRef();\n    const textInputRef = useRef();\n\n    function submitFormHandler(event) {\n      event.preventDefault();\n\n      const enteredAuthor = authorInputRef.current.value;\n      const enteredText = textInputRef.current.value;\n\n      // optional: Could validate here\n\n      props.onAddQuote({ author: enteredAuthor, text: enteredText });\n    }\n\n    usePrompt(\n      \"Are you sure you want to leave, all the entered data will be erased?!\",\n      isFocused\n    );\n\n    const formFocusHandler = () => {\n      setIsBlocking(true);\n    };\n\n    return (\n      <Card>\n        <form\n          onFocus={formFocusHandler}\n          className={classes.form}\n          onSubmit={submitFormHandler}\n        >\n          {props.isLoading && (\n            <div className={classes.loading}>\n              <LoadingSpinner />\n            </div>\n          )}\n\n          <div className={classes.control}>\n            <label htmlFor=\"author\">Author</label>\n            <input type=\"text\" id=\"author\" ref={authorInputRef} />\n          </div>\n          <div className={classes.control}>\n            <label htmlFor=\"text\">Text</label>\n            <textarea id=\"text\" rows=\"5\" ref={textInputRef}></textarea>\n          </div>\n          <div className={classes.actions}>\n            <button className=\"btn\">Add Quote</button>\n          </div>\n        </form>\n      </Card>\n    );\n  };\n}\n\nexport default QuoteForm;\n"]},"metadata":{},"sourceType":"module"}